"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var Sqlite = require("nativescript-sqlite");
var DataBase = (function () {
    function DataBase() {
        var _this = this;
        this.creationScript = "CREATE TABLE IF NOT EXISTS appointement (\n        id_appointment INTEGER PRIMARY KEY AUTOINCREMENT,\n        id_doctor INTEGER,\n        start_date datetime,\n        end_date datetime,\n        title string,\n        id_hospital INTEGER\n    )";
        this.creationScript1 = " CREATE TABLE IF NOT EXISTS doctor (\n        id_doctor INTEGER PRIMARY KEY AUTOINCREMENT,\n        title string,\n        specialisation string,\n        id_hospital INTEGER\n    )";
        this.creationScript2 = "CREATE TABLE IF NOT EXISTS message (\n        id_message INTEGER PRIMARY KEY AUTOINCREMENT,\n        id_doctor INTEGER,\n        text text,\n        date datetime\n    )";
        this.creationScript3 = " CREATE TABLE IF NOT EXISTS hospital_center (\n        id_hostpital INTEGER PRIMARY KEY AUTOINCREMENT,\n        address TEXT,\n        type TEXT,\n        phone TEXT,\n        fax TEXT,\n        wilaya TEXT,\n        town TEXT,\n        lang float,\n        lat float\n    )";
        this.creationScript4 = " CREATE TABLE IF NOT EXISTS work_place (\n        id_doctor INTEGER,\n        id_hostpital INTEGER\n    )";
        if (!this.isInstantiated) {
            (new Sqlite("my.db")).then(function (db) {
                db.execSQL(_this.creationScript);
                db.execSQL(_this.creationScript1);
                db.execSQL(_this.creationScript2);
                db.execSQL(_this.creationScript3);
                db.execSQL(_this.creationScript4).then(function (id) {
                    _this.db = db;
                    _this.isInstantiated = true;
                }, function (error) {
                    console.log("CREATE TABLE ERROR", error);
                });
            }, function (error) {
                console.log("OPEN DB ERROR", error);
            });
        }
    }
    DataBase.prototype.insert = function (data) {
        return this.db.
            execSQL("INSERT INTO people (firstname, lastname) VALUES (?, ?)", [data.firstname, data.lastname]);
    };
    DataBase.prototype.insertDoctor = function (data) {
        return this.db.
            execSQL("INSERT INTO doctor (title, specialisation , id_hospital) VALUES (?, ? , ?)", [data.title, data.specialisation, data.id_hospital]);
    };
    DataBase.prototype.insertAppoint = function (data) {
        return this.db.
            execSQL("INSERT INTO appointement (id_doctor, start_date , end_date ,title) VALUES (?, ? ,? ,?)", [data.id_doctor, data.start_date, data.end_date, data.title]);
    };
    DataBase.prototype.fetch = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.db.all("SELECT * FROM doctor").then(function (rows) {
                var people = [];
                for (var row in rows) {
                    people.push({
                        "id": rows[row][0],
                        "title": rows[row][1],
                        "specialisation": rows[row][2],
                        "id_hospital": rows[row][3]
                    });
                }
                resolve(people);
            }, function (error) {
                reject(error);
            });
        });
    };
    DataBase.prototype.fetchAppoint = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.db.all("SELECT * FROM appointement").then(function (rows) {
                var appoints = [];
                for (var row in rows) {
                    appoints.push({
                        "id_appointment": rows[row][0],
                        "id_doctor": rows[row][1],
                        "start_date": rows[row][2],
                        "title": rows[row][3]
                    });
                }
                resolve(appoints);
            }, function (error) {
                reject(error);
            });
        });
    };
    DataBase = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [])
    ], DataBase);
    return DataBase;
}());
exports.DataBase = DataBase;
//# sourceMappingURL=data:application/json;base64,